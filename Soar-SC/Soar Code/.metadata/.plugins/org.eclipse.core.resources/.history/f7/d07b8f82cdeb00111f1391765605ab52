sp {propose*gather-minerals
   (state <state> ^name Soar-SC
                  ^superstate nil
                  ^io.input-link <input-link>)
   (<input-link> ^resources.mineral <mineral-field>
                 ^units.unit <scv>
                 ^types.type <scv-type>)
   (<scv-type> ^name |Terran SCV|
          ^id <scv-type-id>)
   (<scv> ^type <scv-type-id>
          ^idle 1
          ^id <scv-id>)
-->
   (<state> ^operator <operator> + =)
   (<operator> ^name gather-minerals
               ^scv <scv-id>)
}

sp {apply*gather-minerals
   (state <s> ^name Soar-SC
              ^operator <operator>
              ^io.output-link <output-link>)
   (<operator> ^name gather-minerals
               ^id-dest <mineral-field>
               ^scv <scv>)
-->
   (<output-link> ^move <move-command>)
   (<move-command> ^object <scv>
                   ^dest <mineral-field>)
}

sp {propose*initialize-gather-minerals-substate
   (state <state> ^superstate <superstate>
                 -^name
                  ^impasse no-change)
   (<superstate> ^name Soar-SC
                 ^operator <operator>)
   (<operator> ^name gather-minerals)
-->
   (<state> ^operator <init-operator> + >)
   (<init-operator> ^name initialize-gather-minerals-substate)
}

sp {apply*initialize-gather-minerals-substate
   (state <state> ^operator <init-operator>)
   (<init-operator> ^name initialize-gather-minerals-substate)
-->
   (<s> ^name gather-minerals-substate)
}

sp {propose*locate-closest-mineral-field
   (state <s> ^name gather-minerals-substate
              ^superstate <superstate>)
   (<superstate> ^name Soar-SC)
  -{ (<superstate> ^svs.command.extract <extract-command>)
     (<extract-command> ^type closest) }
-->
   (<s> ^operator <op> + =)
   (<op> ^name locate-closest-mineral-field)
}

sp {apply*locate-closest-mineral-field
   (state <s> ^operator.name locate-closest-mineral-field
              ^superstate <superstate>)
   (<superstate> ^svs.command <commands>)
-->
   (<commands> ^extract <extract-command>)
   (<extract-command> ^type closest ^a <node1> ^b <node2>)
   (<node1> ^type combine)
   (<node2> ^type combine)
}

sp {apply*locate-closest-mineral-field-create-units
   (state <s> ^operator.name query-svs
              ^superstate <ss>)
   (<ss> ^svs.command.extract <extract-command>
         ^io.input-link <input-link>
         ^superstate nil)
   (<c> ^a <node1>)
   (<i> ^units.unit <u>
        ^types.type <t>)
   (<t> ^name |Terran SCV|
        ^id <type-id>)
   (<u> ^svsobject <id-unit>
        ^idle 1
        ^type <type-id>)
-->
   (<node1> ^<id-unit> <unit>)
   (<unit> ^type node ^id <id-unit>)
}

sp {apply*query-svs-scv-create-minerals
   (state <s> ^superstate <ss>
              ^operator.name query-svs
              ^name query-svs-scv)
   (<ss> ^svs.command.extract <c>
         ^io.input-link <i>)
   (<c> ^b <node1>)
   (<i> ^resources.mineral <m>)
   (<m> ^svsobject <id-mineral>)
-->
   (<node1> ^<id-mineral> <mineral>)
   (<mineral> ^type node ^id <id-mineral>)
}

sp {act-on*result-of-query-to-svs-scv
   (state <s> ^impasse tie
              ^superstate <ss>
              ^name query-svs-scv)
   (<ss> ^svs.command.extract <e>
         ^operator <o> +)
   (<e> ^status success
        ^result.record.params <p>)
   (<p> ^a <object>
        ^b <destination>)
   (<ss> ^io.input-link.resources.mineral <mm>
         ^io.input-link.units.unit <uu>)
   (<mm> ^svsobject <destination> ^id <mineral-id>)
   (<uu> ^svsobject <object> ^id <unit-id>)
   (<o> ^id-object <unit-id>
        ^id-dest <mineral-id>)
-->
   (<ss> ^operator <o> >)
}

sp {apply*best-svs-operator
   (state <s> ^superstate nil
              ^operator.name gather-minerals
              ^svs.command <c>
              ^name Soar-SC)
   (<c> ^extract <e>)
   (<e> ^status success)
-->
   (<c> ^extract <e> -)
}

 