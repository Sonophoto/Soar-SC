#Initialize build-building substate
#Decide on the location for building the building

sp {propose*initialize-building-substate
   (state <s> ^superstate <super>
             -^name
              ^impasse no-change)
   (<super> ^operator <o>)	
   (<o> ^name build-building
        ^type <type-id>)
-->
   (<s> ^operator <init-operator> + >)
   (<init-operator> ^name initialize-building-substate
                    ^type <type-id>)
}

sp {apply*initialize-building-substate
   (state <s> ^operator <init-operator>)
   (<init-operator> ^name initialize-building-substate
                    ^type <type-id>)
-->
   (<s> ^name build-building-substate
        ^type <type-id>)
}

#Generate a grid around all the buildings
sp {propose*generate-grid
   (state <s> ^superstate <super>
              ^name build-building-substate
             -^svs.command.extract)
-->
   (<s> ^operator <generate-grid-operator>)
   (<generate-grid-operator> ^name generate-grid)
}

sp {apply*generate-grid*create-svs-command
   (state <s> ^name build-building-substate
              ^operator.name generate-grid
              ^superstate <superstate>
              ^type <type-id>
              ^svs.command <commands>)
   (<superstate> ^io.input-link.types.type <building-type>)
   (<building-type> ^id <type-id>
                    ^x-size <x>
                    ^y-size <y>
                    ^name <type-name>)
-->
   (<commands> ^extract <extract-command>)
   (<extract-command> ^type generate_grid
                      ^x-size <x>
                      ^y-size <y>
                      ^building-type <type-name>)
}

sp {apply*generate-grid*add-type-size-to-state
   (state <s> ^name build-building-substate
              ^operator.name generate-grid
              ^superstate <superstate>
              ^type <type-id>
              ^svs.command <command>)
   (<superstate> ^io.input-link.types.type <building-type>)
   (<building-type> ^id <type-id>
                    ^x-size <x>
                    ^y-size <y>
                    ^name <type-name>)
-->
   (<s> ^type <type>)
   (<type> ^x-size <x>
           ^y-size <y>
           ^building-type <type-name>)
}

#Fetch the grid and place it on the state
sp {propose*fetch-grid
   (state <s> ^name build-building-substate
              ^svs.command.extract <extract>)
   (<extract> ^status success
              ^result.record.value <value>)
   (<value> ^x <x>
             ^y <y>)
-->
   (<s> ^operator <fetch-grid>)
   (<fetch-grid> ^name fetch-grid
                 ^grid <grid>)
   (<grid> ^x <x>
           ^y <y>)
}

sp {apply*fetch-grid
   (state <s> ^name build-building-substate
              ^operator <fetch-grid>)
   (<fetch-grid> ^name fetch-grid
                 ^grid <grid>)
-->
   (<s> ^grid <grid>)
}

#Propose to place the building at all grid locations
sp {propose*build-at-location
   (state <s> ^name build-building-substate
              ^grid <grid>
              ^type <type>)
   (<grid> ^x <x>
           ^y <y>)
   (<type> ^x-size <x-size>
           ^y-size <y-size>)
-->
   (<s> ^operator <set-build-location> +)
   (<set-build-location> ^name set-build-location
                         ^x <x>
                         ^y <y>
                         ^x-size <x-size>
                         ^y-size <y-size>)
}

#Set the final grid to choose on the build-building operator

sp {apply*build-at-location
   (state <s> ^name build-building-substate
              ^superstate <top-state>
              ^operator <set-build-location>
              ^type <type-id>)
   (<set-build-location> ^name set-build-location
                         ^x <x>
                         ^y <y>)
   (<top-state> ^operator <build-building>)
   (<build-building> ^name build-building
                     ^type <type-id>)
-->
   (<build-building> ^location-x <x>
                     ^location-y <y>)
}

#Apply the build-building operator

sp {apply*build-building
   (state <s> ^operator <op>
              ^io.output-link <o>
              ^io.input-link.types.type <building-type>)
   (<op> ^name build-building
         ^worker <id>
         ^location-x <x>
         ^location-y <y>
         ^type <type-id>)
   (<building-type> ^id <type-id>)
   -{(<o> ^<attr>.status)}
-->
   (<o> ^build-building <build>)
   (<build> ^type <type-id>
            ^location-x <x>
            ^location-y <y>
            ^worker <id>)
   (write |Building building of type | <type-id> | at location (| <x> |,| <y> |) with worker | <id> (crlf) )
}

#Preference rules

#sp {pref*idle-better-than-non-idle
#   (state <s> ^operator <o1> +
#              ^operator <o2> +
#              ^io.input-link.units <units>)
#   (<o1> ^name build-building
#         ^worker <id1>)
#   (<o2> ^name build-building
#         ^worker <id2>)
#   (<units> ^unit <u1>
#            ^unit <u2>)
#   (<u1> ^id <id1>
#         ^idle 1)
#   (<u2> ^id <id2>
#         ^idle 0)
#-->
#   (<s> ^operator <o1> > <o2>)
#}

sp {pref*force-wait-for-build-command-done
   (state <state> ^name Soar-SC
                  ^operator <gather-minerals-operator> +
                  ^io.output-link <output-link>)
   (<gather-minerals-operator> ^name gather-minerals
                               ^scv <scv-id>)
   (<output-link> ^build-building <building>)
   (<building> ^worker <scv-id>
              -^status)
-->
   (<state> ^operator <gather-minerals-operator> -)
}

sp {pref*reject-fetch-if-set-build-location
   (state <s> ^name build-building-substate
              ^operator <set-build-location> +
              ^operator <fetch-grid> +)
   (<set-build-location> ^name set-build-location)
   (<fetch-grid> ^name fetch-grid)
-->
   (<s> ^operator <fetch-grid> -)
}
